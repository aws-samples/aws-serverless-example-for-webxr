"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.isComplete=exports.onEvent=void 0;var client_eks_1=()=>{var tmp=require("@aws-sdk/client-eks");return client_eks_1=()=>tmp,tmp},credential_providers_1=()=>{var tmp=require("@aws-sdk/credential-providers");return credential_providers_1=()=>tmp,tmp},node_http_handler_1=()=>{var tmp=require("@aws-sdk/node-http-handler");return node_http_handler_1=()=>tmp,tmp},proxy_agent_1=()=>{var tmp=require("proxy-agent");return proxy_agent_1=()=>tmp,tmp},cluster_1=()=>{var tmp=require("./cluster");return cluster_1=()=>tmp,tmp},consts=()=>{var tmp=require("./consts");return consts=()=>tmp,tmp},fargate_1=()=>{var tmp=require("./fargate");return fargate_1=()=>tmp,tmp};const proxyAgent=new(proxy_agent_1()).ProxyAgent,awsConfig={logger:console,requestHandler:new(node_http_handler_1()).NodeHttpHandler({httpAgent:proxyAgent,httpsAgent:proxyAgent})};let eks;const defaultEksClient={createCluster:req=>getEksClient().createCluster(req),deleteCluster:req=>getEksClient().deleteCluster(req),describeCluster:req=>getEksClient().describeCluster(req),describeUpdate:req=>getEksClient().describeUpdate(req),updateClusterConfig:req=>getEksClient().updateClusterConfig(req),updateClusterVersion:req=>getEksClient().updateClusterVersion(req),createFargateProfile:req=>getEksClient().createFargateProfile(req),deleteFargateProfile:req=>getEksClient().deleteFargateProfile(req),describeFargateProfile:req=>getEksClient().describeFargateProfile(req),configureAssumeRole:req=>{eks=new(client_eks_1()).EKS({...awsConfig,credentials:(0,credential_providers_1().fromTemporaryCredentials)({params:req})})}};function getEksClient(){if(!eks)throw new Error('EKS client not initialized (call "configureAssumeRole")');return eks}async function onEvent(event){return createResourceHandler(event).onEvent()}exports.onEvent=onEvent;async function isComplete(event){return createResourceHandler(event).isComplete()}exports.isComplete=isComplete;function createResourceHandler(event){switch(event.ResourceType){case consts().CLUSTER_RESOURCE_TYPE:return new(cluster_1()).ClusterResourceHandler(defaultEksClient,event);case consts().FARGATE_PROFILE_RESOURCE_TYPE:return new(fargate_1()).FargateProfileResourceHandler(defaultEksClient,event);default:throw new Error(`Unsupported resource type "${event.ResourceType}`)}}
